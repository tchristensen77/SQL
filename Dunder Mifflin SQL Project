## In this project, we are working for "Dunder Mifflin" as a Data Analyst.
## Our boss needs us to add company data to the warehouse then we will be able to provide stakeholders with information about the company.

## Creating Employee Table

CREATE TABLE employee (
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
);

## Creating Branch Table

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mrg_id INT,
    mrg_start_date DATE,
    FOREIGN KEY (mrg_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

## Creating foreign keys in employee table to match columns in branch table

ALTER TABLE employee
ADD FOREIGN KEY (branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL

ALTER TABLE employee
ADD FOREIGN KEY (super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL

## Creating client table

CREATE TABLE client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) 
    ON DELETE SET NULL
);

## Creating Works With table

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

## Creating supplier table

CREATE TABLE branch_supplier (
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY (branch_id, supplier_name),
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

## Next we can begin entering data into the tables.
## However, because the tables have primary and foriegn keys that relate to each other, data must be entered in a specific order.

INSERT INTO employee 
VALUES (100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL)

INSERT INTO branch 
VALUES(1, 'Corporate', 100, '2006-02-09');

## Now we can add David Wallace's branch id, since there is a corresponding id in the branch table

UPDATE employee
SET branch_id = 1
WHERE emp_id =100;

INSERT INTO employee 
VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

## Now adding Michael Scott, we cannot add his branch id until it is in the branch table

INSERT INTO employee
VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULl);

INSERT INTO branch 
VALUES (2, 'Scanton', 102, '1992-04-06');

## Now we add the foreign key into Michael's information

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

## Now adding the rest of the Scanton Branch employees.
## Michael needed to be added first because all other employees need his employee id listed as their supervisor id.

INSERT INTO employee 
VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);

INSERT INTO employee 
VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);

INSERT INTO employee 
VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

## Next we add the supervisor of the Stamford Branch

INSERT INTO employee
VALUES (106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch 
VALUES (3, 'Stamford', 106, '1998-02-13');

## Finally add in Josh's branch ID foreign key.

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

## Then adding the other Stamford employees

INSERT INTO employee 
VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);

INSERT INTO employee 
VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

## This must have been when Jim left the Scanton branch for a season.
## Next we add supplier data into the Branch Supplier table

INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

## Next we need to add client date into the Client table.

INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

## Finally we are adding data to the Works With Table
## This table had to be entered last because it needed the foreign keys from the client table.

INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

## Now that all of the information is in Dunder Mifflins data warehouse, our stakeholders want to gain insights from the data.

## Corporate wants to know employees salaries in descending order.

SELECT 
    first_name, 
    salary
FROM 
    employee
ORDER BY 
    salary DESC;

  employee   salary
0	David	250000
1	Jan 	110000
2	Josh	78000
3	Michael	75000
4	Jim 	71000
5	Stanley	69000
6	Andy	65000
7	Angela	63000
8	Kelly	55000

## How many employees work at each branch?

SELECT 
    branch_id, 
    COUNT(emp_id)
FROM 
    employee
GROUP BY 
    branch_id;

branch   count
1	      2
2         4
3         3

## How much is the company paying in salaries for each branch?

SELECT 
    branch_id, 
    SUM(salary)
FROM 
    employee
GROUP BY
    branch_id;

branch id   salary
    1	    360000
    2     	262000
    3	    214000
  
## How much did each employee make in sales?  
  
SELECT 
    emp_id, 
    SUM(total_sales)
FROM 
    works_with
GROUP BY 
    emp_id;

employee id  total sales
102           282000
105     	  218000
107	          31000
108	          34500

## Sales Totals with employees name instead of employee id

SELECT 
    works_with.emp_id, 
    employee.first_name,   
    employee.last_name, 
    SUM(total_sales)
FROM 
    works_with
JOIN 
    employee
ON 
    works_with.emp_id = employee.emp_id
GROUP BY 
    works_with.emp_id;

102	Michael	Scott	282000
105	Stanley	Hudson	218000
107	Andy	Bernard	31000
108	Jim	  Halpert 34500

## Corporate wants to know if any employees have a birthday in July or August?

SELECT first_name, last_name, birth_day
FROM employee
WHERE birth_day LIKE '%-07-%'
OR birth_day LIKE '%-08-%';

Andy	Bernard	1973-07-22

## Do we sell to any schools?

SELECT client_name
FROM client
WHERE client_name LIKE '%School%';

Dunmore Highschool

## Corporate wants a full list of employee, branch, and client names for holiday cards.

SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;

## Coporate want to know how much we made in profit this year

SELECT SUM(salary) AS total_salaries,
(SELECT SUM(total_sales) FROM works_with) AS income,
total_salaries-income AS profit
FROM employee

total_salaries   income    profit
836000	    565500	      270500


